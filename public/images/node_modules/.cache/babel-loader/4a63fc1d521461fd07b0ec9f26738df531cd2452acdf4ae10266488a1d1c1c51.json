{"ast":null,"code":"var _jsxFileName = \"D:\\\\ZUITT\\\\B443\\\\b443-csp3-fataek-lim\\\\src\\\\pages\\\\Logout.js\",\n  _s = $RefreshSig$();\nimport { useContext, useEffect, useState } from 'react';\nimport { useNavigate, Navigate, useLocation } from 'react-router-dom'; // Import useLocation\nimport Swal from 'sweetalert2';\nimport UserContext from '../context/UserContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Logout() {\n  _s();\n  const {\n    unsetUser\n  } = useContext(UserContext);\n  const [isLoggedOut, setIsLoggedOut] = useState(false); // State to manage logout status\n  const navigate = useNavigate(); // Hook to programmatically navigate\n  const location = useLocation(); // Hook to get the current location\n\n  useEffect(() => {\n    const showLogoutConfirmation = async () => {\n      // Check if the current location is not the login page\n      const result = await Swal.fire({\n        title: 'Are you sure?',\n        text: \"You will be logged out!\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Yes, logout!',\n        cancelButtonText: 'Cancel'\n      });\n      if (result.isConfirmed) {\n        unsetUser();\n        setIsLoggedOut(true); // Update state to indicate user has logged out\n        Swal.fire('Logged out!', 'You have been logged out.', 'success');\n      } else {\n        navigate(-1); // Navigate back to the previous page\n      }\n    };\n    showLogoutConfirmation();\n  }, [unsetUser, navigate, location]); // Add `location` to dependencies\n\n  // Redirect to login page if logged out\n  if (isLoggedOut) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 16\n    }, this);\n  }\n  return null; // Render nothing while waiting for confirmation\n}\n_s(Logout, \"sxKE4zzJ6pjLH8YL//s342/m568=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = Logout;\nvar _c;\n$RefreshReg$(_c, \"Logout\");","map":{"version":3,"names":["useContext","useEffect","useState","useNavigate","Navigate","useLocation","Swal","UserContext","jsxDEV","_jsxDEV","Logout","_s","unsetUser","isLoggedOut","setIsLoggedOut","navigate","location","showLogoutConfirmation","result","fire","title","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","cancelButtonText","isConfirmed","to","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/ZUITT/B443/b443-csp3-fataek-lim/src/pages/Logout.js"],"sourcesContent":["import { useContext, useEffect, useState } from 'react';\nimport { useNavigate, Navigate, useLocation } from 'react-router-dom'; // Import useLocation\nimport Swal from 'sweetalert2';\nimport UserContext from '../context/UserContext';\n\nexport default function Logout() {\n    const { unsetUser } = useContext(UserContext);\n    const [isLoggedOut, setIsLoggedOut] = useState(false); // State to manage logout status\n    const navigate = useNavigate(); // Hook to programmatically navigate\n    const location = useLocation(); // Hook to get the current location\n\n    useEffect(() => {\n        const showLogoutConfirmation = async () => {\n            // Check if the current location is not the login page\n            const result = await Swal.fire({\n                title: 'Are you sure?',\n                text: \"You will be logged out!\",\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonColor: '#3085d6',\n                cancelButtonColor: '#d33',\n                confirmButtonText: 'Yes, logout!',\n                cancelButtonText: 'Cancel'\n            });\n\n            if (result.isConfirmed) {\n                unsetUser();\n                setIsLoggedOut(true); // Update state to indicate user has logged out\n                Swal.fire(\n                    'Logged out!',\n                    'You have been logged out.',\n                    'success'\n                );\n            } else {\n                navigate(-1); // Navigate back to the previous page\n            }\n        };\n\n        showLogoutConfirmation();\n    }, [unsetUser, navigate, location]); // Add `location` to dependencies\n\n    // Redirect to login page if logged out\n    if (isLoggedOut) {\n        return <Navigate to='/login' />;\n    }\n\n    return null; // Render nothing while waiting for confirmation\n}\n"],"mappings":";;AAAA,SAASA,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACvD,SAASC,WAAW,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,kBAAkB,CAAC,CAAC;AACvE,OAAOC,IAAI,MAAM,aAAa;AAC9B,OAAOC,WAAW,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,eAAe,SAASC,MAAMA,CAAA,EAAG;EAAAC,EAAA;EAC7B,MAAM;IAAEC;EAAU,CAAC,GAAGZ,UAAU,CAACO,WAAW,CAAC;EAC7C,MAAM,CAACM,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EACvD,MAAMa,QAAQ,GAAGZ,WAAW,CAAC,CAAC,CAAC,CAAC;EAChC,MAAMa,QAAQ,GAAGX,WAAW,CAAC,CAAC,CAAC,CAAC;;EAEhCJ,SAAS,CAAC,MAAM;IACZ,MAAMgB,sBAAsB,GAAG,MAAAA,CAAA,KAAY;MACvC;MACA,MAAMC,MAAM,GAAG,MAAMZ,IAAI,CAACa,IAAI,CAAC;QAC3BC,KAAK,EAAE,eAAe;QACtBC,IAAI,EAAE,yBAAyB;QAC/BC,IAAI,EAAE,SAAS;QACfC,gBAAgB,EAAE,IAAI;QACtBC,kBAAkB,EAAE,SAAS;QAC7BC,iBAAiB,EAAE,MAAM;QACzBC,iBAAiB,EAAE,cAAc;QACjCC,gBAAgB,EAAE;MACtB,CAAC,CAAC;MAEF,IAAIT,MAAM,CAACU,WAAW,EAAE;QACpBhB,SAAS,CAAC,CAAC;QACXE,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;QACtBR,IAAI,CAACa,IAAI,CACL,aAAa,EACb,2BAA2B,EAC3B,SACJ,CAAC;MACL,CAAC,MAAM;QACHJ,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAClB;IACJ,CAAC;IAEDE,sBAAsB,CAAC,CAAC;EAC5B,CAAC,EAAE,CAACL,SAAS,EAAEG,QAAQ,EAAEC,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAErC;EACA,IAAIH,WAAW,EAAE;IACb,oBAAOJ,OAAA,CAACL,QAAQ;MAACyB,EAAE,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACnC;EAEA,OAAO,IAAI,CAAC,CAAC;AACjB;AAACtB,EAAA,CA1CuBD,MAAM;EAAA,QAGTP,WAAW,EACXE,WAAW;AAAA;AAAA6B,EAAA,GAJRxB,MAAM;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}